Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n



class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode a=null, b=null, c=null, d=null;
        ListNode temp = head;
        // Marking the nodes
        int pos=1;
        while(temp!=null){
            if(pos == left-1)    a = temp;
            if(pos == left) b=temp;
            if(pos == right)    c=temp;
            if(pos == right+1)  d=temp;
            pos++;
            temp = temp.next;
        }
        if(a!=null) a.next=null;
        if(c!=null) c.next=null;
        reverseList(b);
        if(a!=null) a.next=c;
        b.next = d;
        if(a==null) return c;
        return head;
    }
    public void reverseList(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        ListNode Next;
        while(curr!=null){
            Next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = Next;
        }
    }
}
