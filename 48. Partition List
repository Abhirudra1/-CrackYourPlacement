Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]
 
Constraints:
The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200




class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode a = new ListNode(-1);
        ListNode b = new ListNode(-1);
        ListNode tempA = a;
        ListNode tempB = b;
        ListNode temp = head;
        while(temp != null){
            if(temp.val < x){
                tempA.next = temp;
                tempA = tempA.next;
            } else{  // temp.val >=3
                tempB.next = temp;
                tempB = tempB.next;
            }
            temp = temp.next;
        }
        // tempB.next = null; // Last Node
        // a = a.next;
        // b = b.next;
        // tempA.next = b; //list a attach to list b
        // return a;

        // Ensure the last node of list b doesn't point to any old reference
        tempB.next = null; 
        // Attach list b to the end of list a
        tempA.next = b.next;
        return a.next;
    }
}
