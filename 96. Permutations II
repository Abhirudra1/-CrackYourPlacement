Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
 
Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:
1 <= nums.length <= 8
-10 <= nums[i] <= 10



class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        // List<List<Integer>> res = new ArrayList<>();
        // Arrays.sort(nums);
        // backtrack(res, new ArrayList<>(), nums, new boolean[nums.length]);
        // return res;

        // <--------- OR -------->
        List<List<Integer>> ans = new ArrayList<>();
        solve(nums,0,ans);    
        return ans;
    }

    // private void backtrack(List<List<Integer>> res, ArrayList<Integer> tempList,
    // int[] nums, boolean[] used){
    //     // If we match the length
    //     if(tempList.size() == nums.length && !res.contains(tempList)){
    //         res.add(new ArrayList<>(tempList));
    //         return;
    //     }
    //     for(int i=0; i< nums.length; i++){
    //         // Skip if we get same element
    //         if(used[i]) continue;
            
    //         // Add the element and mark it as used
    //         used[i] = true;
    //         tempList.add(nums[i]);
            
    //         //Go back to try other element
    //         backtrack(res, tempList, nums, used);
            
    //         // Remove the element and mark it as unused
    //         used[i] = false;
    //         tempList.remove(tempList.size()-1);
    //     }
    // }

    public void swap(int nums[],int i,int j){
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }

    public void solve(int nums[] ,int i,List<List<Integer>>ans){
        
        if(i==nums.length-1){
            
            List<Integer> curr = new ArrayList<>(nums.length);
            
            for(int k=0;k<nums.length;k++){
                curr.add(nums[k]);
            }

            ans.add(curr);
            return;
        }
        
        boolean isUsed[] = new boolean[21];

        for(int j=i;j<nums.length;j++){  
            if(isUsed[nums[j]+10]) continue;

            isUsed[nums[j]+10]=true; 
            swap(nums,i,j);
            solve(nums,i+1,ans);
            swap(nums,i,j);
        }
    }

}
