Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100




class Solution {
    int max = 0;

    public int calculateDiameter(TreeNode root){
        if(root==null)  return 0;
        int left = calculateDiameter(root.left);
        int right = calculateDiameter(root.right);

        max = Math.max(max, left + right);
        return Math.max(left + 1, right + 1);
    }

    public int levels(TreeNode root){
        if(root==null) return 0;
        return 1 + Math.max(levels(root.left), levels(root.right));
    }
    public int diameterOfBinaryTree(TreeNode root) {
        //Approach - 1
        // if(root==null)  return 0;
        // int myDia = levels(root.left) + levels(root.right);
        // int leftDia = diameterOfBinaryTree(root.left);
        // int rightDia = diameterOfBinaryTree(root.right);
        // return Math.max(myDia, Math.max(leftDia, rightDia));

        //Approach - 2
        calculateDiameter(root);
        return max;
    }
}
