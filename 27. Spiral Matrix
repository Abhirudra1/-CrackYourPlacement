Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100



class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> ans = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        int minRow = 0;
        int minCol = 0;
        int maxRow = m - 1;
        int maxCol = n - 1;

        while (minRow <= maxRow && minCol <= maxCol) {
            // Traverse right across the top row
            for (int j = minCol; j <= maxCol; j++) {
                ans.add(matrix[minRow][j]);
            }
            minRow++;

            // Traverse down the right column
            if (minRow > maxRow) break;
                for (int i = minRow; i <= maxRow; i++) {
                    ans.add(matrix[i][maxCol]);
                }
                maxCol--;
           

            // Traverse left across the bottom row
            if (minCol > maxCol) break;
                for (int j = maxCol; j >= minCol; j--) {
                    ans.add(matrix[maxRow][j]);
                }
                maxRow--;
            

            // Traverse up the left column
            if (minRow > maxRow) break;
                for (int i = maxRow; i >= minRow; i--) {
                    ans.add(matrix[i][minCol]);
                }
                minCol++;
            
        }
        return ans;
    }
}
