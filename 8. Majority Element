Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3
Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109



class Solution {
    public int majorityElement(int[] nums) {
        // Approach 1
        // Arrays.sort(nums);
        // int n = nums.length;
        // return nums[n/2];

        // Approach 2
        // nums, count
        HashMap<Integer, Integer> mp = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            if(!mp.containsKey(nums[i])){
                mp.put(nums[i], 1);
            }else{
                int currCnt = mp.get(nums[i]);
                mp.put(nums[i], currCnt+1);
            }
        }
        int mx=0;
        int ans=0;
        for(Integer key : mp.keySet()){
            if(mp.get(key)>mx){
                mx=mp.get(key);
                ans=key;
            }
        }
        return ans;
    }
}
