Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105




class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        // // Edge Case
        // if(nums == null || nums.length <3)  return new ArrayList<>();

        // // Sort the array
        // Arrays.sort(nums);
        // Set<List<Integer>> result = new HashSet<>();

        // // Now fix the one element and find the other two element
        // for(int i=0; i<nums.length-2; i++){
        //     // Find other two element using two sum approach
        //     int left = i+1;
        //     int right = nums.length-1;
        //     while(left<right){
        //         int sum = nums[i] + nums[left] + nums[right];
        //         if(sum==0){
        //             // Add to hashset, and move to find another
        //             result.add(Arrays.asList(nums[i], nums[left], nums[right]));
        //             left++;
        //             right--;
        //         } else if(sum<0){
        //             left++;
        //         }else{
        //             right--;
        //         }
        //     }
        // }
        // return new ArrayList<>(result);


        // Other's Solution
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);

        for (int i = 0; i < nums.length - 2 && nums[i] <= 0; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) continue;
            twoSum(-nums[i], nums, i + 1, list);
        }

        return list;
    }

    private void twoSum(int target, int[] nums, int startIndex, List<List<Integer>> list) {
        int i = startIndex; 
        int j = nums.length - 1;

        while (i < j) {
            if (nums[i] + nums[j] < target) {
                i++;
                continue;
            }

            if (nums[i] + nums[j] > target) {
                j--;
                continue;
            }

            list.add(Arrays.asList(-target, nums[i], nums[j]));
            i++;
            j--;

            while (j > i && nums[j] == nums[j + 1]) {
                j--;
            }
        }
    }
}
