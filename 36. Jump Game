You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.


Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 
Constraints:
1 <= nums.length <= 104
0 <= nums[i] <= 105


class Solution {
    public boolean canJump(int[] nums) {
        // int n = nums.length;
        // if(nums.length == 1){
        //     return true;
        // }
        
        // for(int i=0; i<nums.length-1; i++){
        //     if(nums[i] == 0 && i<nums.length-1){
        //         if(nums[i-1] < n-i+1){
        //         i = i + nums[i] - 1;
        //         } else{
        //             return false;
        //         }
        //     }
        //     i += nums[i] -1;
        // }
        // return true;

        // Other's Solution 1
        // int jump = 0;
        // for(int i = 0; i < nums.length; i ++) {
        //    if(i > jump)
        //     return false;
        //    jump = Math.max(jump, i + nums[i]);
        // } 
        // return true;

        // Greedy Approach
        // Initially final position is the last index
        int finalPos = nums.length-1;

        // Start with the second last index
        for(int i=finalPos-1; i>=0; i--){
            // If you can reach the final position from this index
            // update the final index
            if(i + nums[i] >= finalPos){
                finalPos = i;
            }
        }

        // If we reach the first index, then we can make the jump possible
        return finalPos == 0;

    }
}
