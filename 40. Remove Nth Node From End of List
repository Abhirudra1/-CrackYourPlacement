Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]
 
Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Method-1
        // ListNode temp = head;
        // int size=0;
        // while(temp!=null){
        //     temp = temp.next;
        //     size++;
        // }
        // // if(size==1){
        // //     return null;
        // // }
        // // if(size-n == 0) return head.next;

        // if(n==size) return head.next;
        // temp = head;
        // for(int i=1; i<size-n; i++){
        //     temp = temp.next;
        // }
        // temp.next = temp.next.next;
        // return head;


        // Method-2
        ListNode slow = head;
        ListNode fast = head;
        for(int i=0; i<n; i++){
            fast = fast.next;
        }
        if(fast == null)    return head.next;
        while(fast!=null && fast.next!=null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}
