You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.


Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 
Constraints:
1 <= s.length <= 105
2 <= k <= 104
s only contains lowercase English letters.




class Solution {
    public String removeDuplicates(String s, int k) {
        // Approach 1 (Using two pointer)
        // int i=0, n=s.length(), count[] = new int[n];
        // char[] arr = s.toCharArray();
        // for(int j=0; j<n; ++j, ++i){
        //     arr[i] = arr[j];
        //     count[i] = i >0 && arr[i-1] == arr[j] ? count[i-1]+1 : 1;
        //     if(count[i]==k) i-=k;
        // }
        // return new String(arr, 0, i);

        // Using Stack
        int[] count = new int[s.length()];
        StringBuilder sb = new StringBuilder();
        for(char c:s.toCharArray()){
            sb.append(c);
            int last = sb.length()-1;
            count[last] = 1 + (last > 0 && 
                    sb.charAt(last) == sb.charAt(last-1) ? count[last-1] : 0);
            if(count[last] >= k)    sb.delete(sb.length()-k, sb.length());
        }
        return sb.toString();
    }
}
