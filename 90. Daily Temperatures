Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

Example 1:
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Example 2:
Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]

Example 3:
Input: temperatures = [30,60,90]
Output: [1,1,0]
 
Constraints:
1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100



class Solution {
    public int[] dailyTemperatures(int[] temp) {
        Stack<Integer> s = new Stack();
        int n = temp.length;
        int[] ans = new int[n];
        for(int i=0; i<n; i++){
           while(!s.isEmpty() && temp[s.peek()]<temp[i]){
                ans[s.peek()] = i-s.pop();
           }
           s.push(i);
        }
        return and;



       // Other Solution
        int n = temp.length;
        int hotest = temp[n - 1];
        int[] ans = new int[n];
        for (int i = n - 2; i >= 0; i--) {
            int cur = temp[i];
            if (cur >= hotest) {
                hotest = cur;
            } else {
                int days = 1;
                while (temp[i + days] <= cur) {
                    days += ans[i + days];
                }
                ans[i] = days;
            }
        }
        return ans;
    }
}
