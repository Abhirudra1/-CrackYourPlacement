You are given an array arr[] of N integers. The task is to find the smallest positive number missing from the array.
Note: Positive number starts from 1.

Example 1:
Input:
N = 5
arr[] = {1,2,3,4,5}
Output: 6
Explanation: Smallest positive missing 
number is 6.

Example 2:
Input:
N = 5
arr[] = {0,-10,1,3,-20}
Output: 2
Explanation: Smallest positive missing 
number is 2.

Your Task:
The task is to complete the function missingNumber() which returns the smallest positive missing number in the array.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 106
-106 <= arr[i] <= 106

 


class Solution {  
    public int firstMissingPositive(int[] nums) {
        // Brute force Approach --->
        // int missingN = 1;
        // Arrays.sort(nums);
        // for(int i=0; i<nums.length; i++){
        //     if(nums[i] > 0){
        //         if(nums[i] == missingN){
        //             missingN++;
        //         } else if(nums[i] > missingN){
        //             break;
        //         }
        //     }
        // }
        // return missingN;
        

        // O(n)
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<nums.length; i++){
            if(nums[i]>0){
                set.add(nums[i]);
            }
        }
        for(int i=1; i<=nums.length+1; i++){
            if(!set.contains(i)){
                return i;
            }
        }
        return -1;
    }
}
