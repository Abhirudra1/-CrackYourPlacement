Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.


Example 1:
Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Example 2:
Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".

Example 3:
Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 
Constraints:
1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.



class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> s1 = new Stack();
        StringBuilder sb1 = new StringBuilder("");
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '#' && s1.isEmpty()){
                continue;
            }
            else if(ch != '#'){
                s1.push(ch);
                sb1.append(ch);
            }else{
                s1.pop();
                sb1.deleteCharAt(sb1.length() - 1);
            }
        }
        Stack<Character> s2 = new Stack();
        StringBuilder sb2 = new StringBuilder("");
        for(int i=0; i<t.length(); i++){
            char ch = t.charAt(i);
            if(ch == '#' && s2.isEmpty()){
                continue;
            }
            else if(ch != '#'){
                s2.push(ch);
                sb2.append(ch);
            }else{
                s2.pop();
                sb2.deleteCharAt(sb2.length() - 1);
            }
        }
        if(s1.size()!=s2.size()){
            return false;
        }
        String str1 = new String(sb1);
        String str2= new String(sb2);
        if(str1.equals(str2)){
            return true;
        }
        return false;
    }
}
